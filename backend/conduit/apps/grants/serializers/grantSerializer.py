from rest_framework import serializers
from django.core.validators import MinValueValidator, URLValidator, MaxValueValidator

from conduit.apps.profiles.serializers import ProfileSerializer
from conduit.apps.foundations.serializers import FoundationSerializer

from ..models import Grant, Tag
from ..relations import TagRelatedField
from ..common.grantState import GrantState

import datetime


class GrantSerializer(serializers.ModelSerializer):

    # Autogenerated value
    slug = serializers.SlugField(required=False)
    foundation = FoundationSerializer(read_only=True)

    # Required values
    title = serializers.CharField(required=True)
    description = serializers.CharField(required=True)
    minAmountPerGrantee = serializers.IntegerField(required=True, validators=[
                                                   MinValueValidator(0, 'Minimum amount per grant should positive')])

    # Optional values
    state = serializers.IntegerField(
        required=False,
        default=GrantState.RAISING,
        validators=[MinValueValidator(1), MaxValueValidator(5)])  # TODO: Validators
    tagList = TagRelatedField(many=True, required=False, source='tags')
    externalWebsite = serializers.URLField(required=False, default=None)
    allowDonations = serializers.BooleanField(required=False, default=True)
    otherAwards = serializers.CharField(required=False)
    otherDetails = serializers.CharField(required=False)

    # Fields generated from other models
    favorited = serializers.SerializerMethodField()
    favoritesCount = serializers.SerializerMethodField(
        method_name='get_favorites_count'
    )
    img = serializers.SerializerMethodField(method_name='get_image_link')

    # Fields generated from the db
    createdAt = serializers.SerializerMethodField(method_name='get_created_at')
    updatedAt = serializers.SerializerMethodField(method_name='get_updated_at')

    class Meta:
        model = Grant
        fields = (
            'slug',
            'foundation',
            'title',
            'description',
            'minAmountPerGrantee',
            'state',
            'tagList',
            'externalWebsite',
            'allowDonations',
            'otherAwards',
            'otherDetails',
            'favorited',
            'favoritesCount',
            'img',
            'createdAt',
            'updatedAt',
        )

    def create(self, validated_data):
        foundation = self.context.get('foundation', None)
        tags = validated_data.pop('tags', [])
        grant = Grant.objects.create(foundation=foundation, **validated_data)
        for tag in tags:
            grant.tags.add(tag)

        return grant

    def get_created_at(self, instance):
        return instance.created_at.isoformat()

    def get_favorited(self, instance):
        request = self.context.get('request', None)

        if request is None:
            return False

        if not request.user.is_authenticated:
            return False

        return request.user.profile.has_favorited_grant(instance)

    def get_favorites_count(self, instance):
        return instance.favorited_grants_by.count()

    def get_updated_at(self, instance):
        return instance.updated_at.isoformat()

    def get_image_link(self, instance):
        if instance.img and hasattr(instance.img, 'url'):
            return instance.img.base_url
        return ''


class TagSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tag
        fields = ('tag',)

    def to_representation(self, obj):
        return obj.tag
